Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> construct
Rule 1     construct -> VARIABLE_DECLARATION
Rule 2     construct -> IF_STATEMENT
Rule 3     construct -> FUNCTION_DECLARATION
Rule 4     construct -> FUNCTION_DEF
Rule 5     construct -> FOR_LOOP
Rule 6     construct -> OTHER

Terminals, with rules where they appear

FOR_LOOP             : 5
FUNCTION_DECLARATION : 3
FUNCTION_DEF         : 4
IF_STATEMENT         : 2
OTHER                : 6
VARIABLE_DECLARATION : 1
error                : 

Nonterminals, with rules where they appear

construct            : 0

Parsing method: LALR

state 0

    (0) S' -> . construct
    (1) construct -> . VARIABLE_DECLARATION
    (2) construct -> . IF_STATEMENT
    (3) construct -> . FUNCTION_DECLARATION
    (4) construct -> . FUNCTION_DEF
    (5) construct -> . FOR_LOOP
    (6) construct -> . OTHER

    VARIABLE_DECLARATION shift and go to state 2
    IF_STATEMENT    shift and go to state 3
    FUNCTION_DECLARATION shift and go to state 4
    FUNCTION_DEF    shift and go to state 5
    FOR_LOOP        shift and go to state 6
    OTHER           shift and go to state 7

    construct                      shift and go to state 1

state 1

    (0) S' -> construct .



state 2

    (1) construct -> VARIABLE_DECLARATION .

    $end            reduce using rule 1 (construct -> VARIABLE_DECLARATION .)


state 3

    (2) construct -> IF_STATEMENT .

    $end            reduce using rule 2 (construct -> IF_STATEMENT .)


state 4

    (3) construct -> FUNCTION_DECLARATION .

    $end            reduce using rule 3 (construct -> FUNCTION_DECLARATION .)


state 5

    (4) construct -> FUNCTION_DEF .

    $end            reduce using rule 4 (construct -> FUNCTION_DEF .)


state 6

    (5) construct -> FOR_LOOP .

    $end            reduce using rule 5 (construct -> FOR_LOOP .)


state 7

    (6) construct -> OTHER .

    $end            reduce using rule 6 (construct -> OTHER .)

